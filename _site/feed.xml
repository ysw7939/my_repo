

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>하루코딩</title>
  <subtitle>A minimal, responsive and feature-rich Jekyll theme for technical writing.</subtitle>
  <updated>2024-10-08T00:18:41+09:00</updated>
  <author>
    <name>su-won</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator>
  <rights> © 2024 su-won </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>가상면접 사례로 배우는 대규모 시스템 설계 기초</title>
    <link href="http://localhost:4000/posts/%EA%B0%80%EC%83%81%EB%A9%B4%EC%A0%91-%EC%82%AC%EB%A1%80%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EB%8C%80%EA%B7%9C%EB%AA%A8-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%84%A4%EA%B3%84-%EA%B8%B0%EC%B4%88/" rel="alternate" type="text/html" title="가상면접 사례로 배우는 대규모 시스템 설계 기초" />
    <published>2024-04-11T00:00:00+09:00</published>
  
    <updated>2024-10-08T00:03:34+09:00</updated>
  
    <id>http://localhost:4000/posts/%EA%B0%80%EC%83%81%EB%A9%B4%EC%A0%91-%EC%82%AC%EB%A1%80%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EB%8C%80%EA%B7%9C%EB%AA%A8-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%84%A4%EA%B3%84-%EA%B8%B0%EC%B4%88/</id>
    <content src="http://localhost:4000/posts/%EA%B0%80%EC%83%81%EB%A9%B4%EC%A0%91-%EC%82%AC%EB%A1%80%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EB%8C%80%EA%B7%9C%EB%AA%A8-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%84%A4%EA%B3%84-%EA%B8%B0%EC%B4%88/" />
    <author>
      <name>Yang</name>
    </author>

  
    
    <category term="독후감" />
    
  

  
    <summary>
      





      가상면접 사례로 배우는 대규모 시스템 설계 기초

test

    </summary>
  

  </entry>

  
  <entry>
    <title>지도 API를 이용한 실시간 위치정보 전송</title>
    <link href="http://localhost:4000/posts/%EC%A7%80%EB%8F%84-API%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%8B%A4%EC%8B%9C%EA%B0%84-%EC%9C%84%EC%B9%98%EC%A0%95%EB%B3%B4-%EC%A0%84%EC%86%A1/" rel="alternate" type="text/html" title="지도 API를 이용한 실시간 위치정보 전송" />
    <published>2024-02-03T00:00:00+09:00</published>
  
    <updated>2024-10-08T00:03:34+09:00</updated>
  
    <id>http://localhost:4000/posts/%EC%A7%80%EB%8F%84-API%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%8B%A4%EC%8B%9C%EA%B0%84-%EC%9C%84%EC%B9%98%EC%A0%95%EB%B3%B4-%EC%A0%84%EC%86%A1/</id>
    <content src="http://localhost:4000/posts/%EC%A7%80%EB%8F%84-API%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%8B%A4%EC%8B%9C%EA%B0%84-%EC%9C%84%EC%B9%98%EC%A0%95%EB%B3%B4-%EC%A0%84%EC%86%A1/" />
    <author>
      <name>Yang</name>
    </author>

  
    
    <category term="위치기반 프로젝트" />
    
  

  
    <summary>
      





      지도 API를 이용한 실시간 위치정보 전송

요구 사항


  웹페이지에 접속하여 실시간으로 변경되는 위치정보를 전송한다.
  전송된 각각의 위치정보를 마커로 표시하고 선으로 연결한다.


사용도구


  네이버 지도 API 사용
  편리한 http 통신을 위해 Axios를 사용
  위치 변경시 실행되는 메소드
웹 브라우저에서 제공하는 *navigator.geolocation.watchPosition* 사용



  https://navermaps.github.io/maps.js.ncp/docs/


네이버 지도 생성

// 네이버 지도를 생성합니다.
var map = new naver.maps.Map("map", {
  center: new naver.maps.LatLng(37.5665, 126.97...
    </summary>
  

  </entry>

  
  <entry>
    <title>객체 지향 설계와 스프링</title>
    <link href="http://localhost:4000/posts/%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5-%EC%84%A4%EA%B3%84%EC%99%80-%EC%8A%A4%ED%94%84%EB%A7%81/" rel="alternate" type="text/html" title="객체 지향 설계와 스프링" />
    <published>2023-05-05T00:00:00+09:00</published>
  
    <updated>2024-10-08T00:03:34+09:00</updated>
  
    <id>http://localhost:4000/posts/%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5-%EC%84%A4%EA%B3%84%EC%99%80-%EC%8A%A4%ED%94%84%EB%A7%81/</id>
    <content src="http://localhost:4000/posts/%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5-%EC%84%A4%EA%B3%84%EC%99%80-%EC%8A%A4%ED%94%84%EB%A7%81/" />
    <author>
      <name>Yang</name>
    </author>

  
    
    <category term="Spring" />
    
  

  
    <summary>
      





      객체 지향 설계와 스프링

스프링이란

여러가지의 기술의 모음이라고 할수 있다. 
스프링 데이터 : JPA, DB에 있는 기본적인 CRUD를 편리하게 사용할수 있도록 도와준다.
스프링 시큐리티 : 보안과 관련된 설정을 도와준다.
스프링 세션 : 세션에 관련된 설정을 도와준다.
스프링 배치 : 배치 처리를 도와준다.
스프링 Rest Docs : API 문서화를 편하게 해준다.
….

스프링 부트


  Tomcat과 같은 별도의 웹서버를 내장에서 별도의 웹 서버를 설치하지 않아도 된다.
  starter 라이브러리를 가져올때 starter를 사용하면 하나를 가져올때 필요한 부수적인 라이브러리를 같이 빌드한다.
  서드파티(3rd parth) 자주사용되는 메이저 라이브러리와의 버전호환성을 관리해준다.
  ...
    </summary>
  

  </entry>

  
  <entry>
    <title>HTTP 기본</title>
    <link href="http://localhost:4000/posts/HTTP-%EA%B8%B0%EB%B3%B8/" rel="alternate" type="text/html" title="HTTP 기본" />
    <published>2023-04-26T00:00:00+09:00</published>
  
    <updated>2024-10-08T00:03:34+09:00</updated>
  
    <id>http://localhost:4000/posts/HTTP-%EA%B8%B0%EB%B3%B8/</id>
    <content src="http://localhost:4000/posts/HTTP-%EA%B8%B0%EB%B3%B8/" />
    <author>
      <name>Yang</name>
    </author>

  
    
    <category term="HTTP" />
    
  

  
    <summary>
      





      HTTP 기본

HTTP

Hyper Text Transfer Protoco

모든 형태의 데이터를 HTTP 메시지로 전송한다.


  HTML, TEXT
  IMAGE, 음성, 영상, 파일
  JSON, XML (API)


기반 프로토콜


  TCP: HTTP/1.1, HTTP/2
  UDP: HTTP/3
  현재 HTTP/1.1 주로 사용한다.


HTTP 특징

클라이언트 서버 구조


  Request Response 구조
  클라이언트는 UI와 사용성에 대해 고민한다.
  서버는 비지니스 로직과 데이터를 관리한다.


Stateful

상태 유지: 중간에 다른 서버로 변경되서는 안된다.

서버가 이전상태의 내용을 보존한다.

Stateless

무상태: 중간에 다흔 서버로 변경되어도 된다....
    </summary>
  

  </entry>

  
  <entry>
    <title>URI와 웹 브라우저 요청 흐름</title>
    <link href="http://localhost:4000/posts/URI%EC%99%80-%EC%9B%B9-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80-%EC%9A%94%EC%B2%AD-%ED%9D%90%EB%A6%84/" rel="alternate" type="text/html" title="URI와 웹 브라우저 요청 흐름" />
    <published>2023-04-24T00:00:00+09:00</published>
  
    <updated>2024-10-08T00:03:34+09:00</updated>
  
    <id>http://localhost:4000/posts/URI%EC%99%80-%EC%9B%B9-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80-%EC%9A%94%EC%B2%AD-%ED%9D%90%EB%A6%84/</id>
    <content src="http://localhost:4000/posts/URI%EC%99%80-%EC%9B%B9-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80-%EC%9A%94%EC%B2%AD-%ED%9D%90%EB%A6%84/" />
    <author>
      <name>Yang</name>
    </author>

  
    
    <category term="HTTP" />
    
  

  
    <summary>
      





      URI와 웹 브라우저 요청 흐름

URI(Uniform Resource Identifier)

uri 안에는 url 과 urn이 포함되어있다.

Uniform :  리소스 식별하는 통일된 방식

Resource : 자원, URI로 식별할 수 있는 모든 것(제한 없음)

Identifier : 다른 항목과 구분하는데 필요한 정보

URL(Resource Locator)

리소스의 위치를 의미한다.

URN(Resource Name)

리소스의 이름을 의미한다. 
이름만으로 실제 리소스를 찾을 수 있는 방법이 보편화 되어있지 않다.

URL 문법

scheme

주로 프로토콜을 사용한다.

프로토콜 : 클라이언트와 서버간의 어떤 방식으로 자원에 접근할 것인가 하는 약속 규칙을 의미한다.


  예) htt...
    </summary>
  

  </entry>

</feed>


